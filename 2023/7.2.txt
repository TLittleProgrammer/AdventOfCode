namespace ConsoleApp21
{
    internal class Program
    {
        public static Dictionary<char, int> Weights = new()
        {
            ['J'] = 0,
            ['2'] = 1,
            ['3'] = 2,
            ['4'] = 3,
            ['5'] = 4,
            ['6'] = 5,
            ['7'] = 6,
            ['8'] = 7,
            ['9'] = 8,
            ['T'] = 9,
            ['Q'] = 11,
            ['K'] = 12,
            ['A'] = 13,
        };

        public static void Main(string[] args)
        {
            string[] lines = File.ReadAllLines("input.txt");

            int sum = 0;
            int lineIndex = 0;
            List<(string, int)> cards = new List<(string, int)>();

            while (lineIndex < lines.Length)
            {
                string[] line = lines[lineIndex].Split(' ');
                
                cards.Add((line[0], int.Parse(line[1])));
                
                lineIndex++;
            }
            
            List<(int, int)> ranks = RankDetermination(cards);

            ranks.Sort(((int, int) first, (int, int) second) =>
            {
                if(first.Item1 > second.Item1)
                    return 1;
                if (first.Item1 < second.Item1)
                    return -1;

                for (int i = 0; i < 5; i++)
                {
                    if (Weights[cards[first.Item2].Item1[i]] > Weights[cards[second.Item2].Item1[i]])
                    {
                        return 1;
                    }
                    if (Weights[cards[first.Item2].Item1[i]] < Weights[cards[second.Item2].Item1[i]])
                    {
                        return -1;
                    }
                }

                return 0;
            });

            int counter = 1;
            foreach ((int, int) rank in ranks)
            {
                Console.WriteLine((cards[rank.Item2].Item2) + " ; " + (counter));
                sum += cards[rank.Item2].Item2 * counter++;
            }
            
            Console.WriteLine(sum);
        }

        private static List<(int, int)> RankDetermination(List<(string, int)> cards)
        {
            List<(int, int)> ranks = new List<(int, int)>();

            for (int i = 0; i < cards.Count; i++)
            {
                int weight = 0;
                if (HighCard(cards[i].Item1))
                {
                    weight = 0;
                }
                if (OnePairs(cards[i].Item1))
                {
                    weight = 1000;
                }
                if (TwoPairs(cards[i].Item1))
                {
                    weight = 1500;
                }
                if (CheckThree(cards[i].Item1))
                {
                    weight = 2000;
                }
                if (FullHouse(cards[i].Item1))
                {
                    weight = 2500;
                }
                if (CheckFiveOrCare(cards[i].Item1, 4))
                {
                    weight = 3000;
                }
                if (CheckFiveOrCare(cards[i].Item1, 5))
                {
                    weight = 3500;
                }
                
                

                ranks.Add((weight, i));
            }
            
            return ranks;
        }

        private static bool HighCard(string line)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.Count != 5)
            {
                return false;
            }

            return true;
        }
        
        private static bool OnePairs(string line)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.ContainsKey('J'))
            {
                if (counter.Count == 5)
                {
                    return true;
                }

                return false;
            }
            
            if (counter.Count != 4)
            {
                return false;
            }

            return true;
        }

        private static bool TwoPairs(string line)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.ContainsKey('J'))
            {
                int needCards = 0;
                foreach (KeyValuePair<char,int> value in counter)
                {
                    if(value.Key == 'J')
                        continue;

                    if (value.Value == 1)
                    {
                        needCards++;
                    }
                }

                if (needCards <= counter['J'])
                {
                    return true;
                }

                return false;
            }

            if (counter.Count != 3)
            {
                return false;
            }
            
            foreach (KeyValuePair<char, int> value in counter)
            {
                if (value.Value != 1 && value.Value != 2)
                {
                    Console.WriteLine();
                    return false;
                }
            }
            
            return true;
        }

        private static bool CheckThree(string line)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.ContainsKey('J'))
            {
                if (counter['J'] == 3 && counter.Count == 3)
                {
                    return true;
                }
                
                if (counter.Count != 4)
                    return false;
                
                foreach (KeyValuePair<char,int> value in counter)
                {
                    if(value.Key == 'J')
                        continue;

                    if (value.Value + counter['J'] == 3)
                    {
                        return true;
                    }
                }

                return false;
            }
            
            if (counter.Count != 3)
            {
                return false;
            }

            foreach (KeyValuePair<char, int> value in counter)
            {
                if (value.Value != 1 && value.Value != 3)
                {
                    return false;
                }
            }
            
            return true;
        }

        private static bool FullHouse(string line)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.ContainsKey('J'))
            {
                if (counter.Count != 3)
                    return false;

                return true;
            }
            
            if (counter.Count != 2)
            {
                return false;
            }

            foreach (KeyValuePair<char, int> value in counter)
            {
                if (value.Value != 2 && value.Value != 3)
                {
                    return false;
                }
                    
            }
            
            return true;
        }

        private static Dictionary<char, int> FillSymbolDictionary(string line)
        {
            Dictionary<char, int> counter = new Dictionary<char, int>();

            for (int i = 0; i < line.Length; i++)
            {
                if (counter.ContainsKey(line[i]))
                {
                    counter[line[i]]++;
                }
                else
                {
                    counter.Add(line[i], 1);
                }
            }

            return counter;
        }

        private static bool CheckFiveOrCare(string line, int duplicates)
        {
            Dictionary<char, int> counter = FillSymbolDictionary(line);

            if (counter.ContainsKey('J'))
            {
                if (counter['J'] == duplicates)
                    return true;
                
                foreach (KeyValuePair<char,int> valuePair in counter)
                {
                    if (valuePair.Key == 'J')
                        continue;
                
                    if (valuePair.Value == duplicates || valuePair.Value + counter['J'] == duplicates)
                    {
                        return true;
                    }
                }

                return false;
            }
            
            foreach (KeyValuePair<char,int> valuePair in counter)
            {
                if (valuePair.Value == duplicates)
                {
                    return true;
                }
            }
            

            return false;
        }
    }
}