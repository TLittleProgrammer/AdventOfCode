namespace ConsoleApp12
{
    internal class Program
    {
        public static void Main(string[] args)
        {
            Int64 min = 999999999999999999;
            Int64 lineIndex = 2;
            int currentTargetLineIndex = 0;
            List<string> targetLines = new List<string>()
            {
                "seed-to-soil map:",
                "soil-to-fertilizer map:",
                "fertilizer-to-water map:",
                "water-to-light map:",
                "light-to-temperature map:",
                "temperature-to-humidity map:",
                "humidity-to-location map:",
            };
            List<List<Int64[]>> results = new List<List<Int64[]>>();

            for (int i = 0; i < 7; i++)
            {
                results.Add(new List<Int64[]>());
            }
            
            string[] lines = File.ReadAllLines("input.txt");
            List<Int64> targetSeeds = GetSeeds(lines[0]);
            
            while (lineIndex < lines.Length)
            {
                if (currentTargetLineIndex != 7 && lines[lineIndex].Contains(targetLines[currentTargetLineIndex]))
                {
                    currentTargetLineIndex++;
                }
                else
                {
                    if (lines[lineIndex].Length != 0)
                    {
                        results[currentTargetLineIndex - 1].Add(GetNumbers(lines[lineIndex]));
                    }
                }
                
                lineIndex++;
            }

            foreach (Int64 seed in targetSeeds)
            {
                Int64 index = seed;
                
                for (int i = 0; i < 7; i++)
                {
                    foreach (Int64[] lineNumber in results[i])
                    {
                        if (index >= lineNumber[1] && index < lineNumber[1] + lineNumber[2])
                        {
                            index = lineNumber[0] + (Math.Abs(index - lineNumber[1]));
                            break;
                        }
                    }
                }

                if (min > index)
                {
                    min = index;
                }
            }

            Console.WriteLine(min);
        }

        private static Int64[] GetNumbers(string line)
        {
            Int64[] numbers = new Int64[3];
            Int64 number = -1;
            Int64 arrayIndex = 0;
            
            for (int index = 0; index < line.Length; index++)
            {
                if (IsDigit(line[index]))
                {
                    if (number == -1)
                    {
                        number = 0;
                    }
                    
                    number = number * 10 + ConvertToNumber(line[index]);
                }
                else
                {
                    if (number != -1)
                    {
                        numbers[arrayIndex++] = number;
                        number = -1;
                    }
                }
            }
            
            if (number != -1)
            {
                numbers[arrayIndex] = number;
            }
            
            return numbers;
        }

        private static List<Int64> GetSeeds(string line)
        {
            List<Int64> seeds = new List<Int64>();
            int index = 0;
            Int64 number = 0;

            while (line[index] != ':')
            {
                index++;
            }

            for (; index < line.Length; index++)
            {
                if (IsDigit(line[index]))
                {
                    number = number * 10 + ConvertToNumber(line[index]);
                }
                else
                {
                    if (number != 0)
                    {
                        seeds.Add(number);
                        number = 0;
                    }
                }
            }
            
            if (number != 0)
            {
                seeds.Add(number);
            }
            
            return seeds;
        }

        private static bool IsDigit(char symbol)
        {
            return symbol - '0' >= 0 && symbol - '0' <= 9;
        }

        private static Int64 ConvertToNumber(char symbol)
        {
            return symbol - '0';
        }
    }
}